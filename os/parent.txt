#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <fcntl.h>  

int main() {
    
    int fd = open("example.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (fd < 0) {
        perror("Failed to open file");
        exit(1);
    }

    printf("Parent process: PID = %d, File descriptor opened: %d\n", getpid(), fd);

   
    pid_t pid = fork();

    if (pid < 0) {
      
        perror("fork failed");
        close(fd); 
        exit(1);
    } else if (pid == 0) {
        
        printf("Child process: PID = %d, writing to file...\n", getpid());
        
        
        const char *message = "Hello from the child process!\n";
        write(fd, message, sizeof(char) * 31); 
        
       
        close(fd);
        
        
        exit(0);
    } else {
        
        int status;
        wait(&status);
        if (WIFEXITED(status)) {
            printf("Parent process: Child PID = %d terminated with status %d.\n", pid, WEXITSTATUS(status));
        } else {
            printf("Parent process: Child PID = %d did not terminate successfully.\n", pid);
        }
        close(fd);

        printf("Parent process: File descriptor %d closed.\n", fd);
    }

    return 0;
}